openapi: 3.0.0
info:
  title: Node User API
  description: API for users management and authentication
  version: 1.0.0

servers:
  - url: http://localhost:3000
    description: Development server

paths:
  /api/v1/:
    get:
      summary: Get API welcome message
      responses:
        '200':
          description: API welcome message
          content:
            text/plain:
              example: Welcome to the Users Authentication API
              schema:
                $ref: '#/components/schemas/String'
        '500':
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'
        default:
          description: Unexpected Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'

  /api/v1/users/:
    get:
      summary: Get a list of all users
      parameters:
        - name: page
          in: query
          description: "Page number for pagination (default: 1)"
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            format: int32
        - name: limit
          in: query
          description: "Number of users shown per page (default: 10)"
          required: false
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            format: int32
      responses:
        '200':
          description: List of users
          content:
            application/json:
              example:
                page: 1
                per_page: 10
                search_name: John
                users:
                  schema:
                    - $ref: '#/components/schemas/User-Object'
              schema:
                $ref: '#/components/schemas/JSON'
        '500':
          description: Internal Server Error
          content:
            application/json:
              example: Error getting the users list
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'
    
    put:
      summary: Update user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200': 
          description: User updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        '400':
          description: Bad request
          content:
            application/json:
              example: Missing user ID
              schema:
                $ref: '#/components/schemas/JSON'
        '404':
          description: User not found
          content:
            application/json:
              example: User not found
              schema:
                $ref: '#/components/schemas/JSON'
        '500':
          description: Internal Server Error
          content:
            application/json:
              example: Error updating the user
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'
    delete:
      summary: Delete user
      responses:
        '200':
          description: User deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        '404':
          description: User not found
          content:
            application/json:
              example: User not found
              schema:
                $ref: '#/components/schemas/JSON'
        '500':
          description: Internal Server Error
          content:
            application/json:
              example: Error deleting the user
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode' 
    
    patch:
      summary: Update user's password
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 50
                  pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
                newPassword:
                  type: string
                  maxLength: 80
                  pattern: ^[A-Za-z0-9]{3,80}$
              additionalProperties: false
      responses:
        '200':
          description: Password updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        '400':
          description: Bad request
          content:
            application/json:
              example: 'Missing required field: Email'
              schema:
                $ref: '#/components/schemas/JSON'
        '500':
          description: Internal Server Error
          content:
            application/json:
              example: Error updating the password
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseMethod'

    post:
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User-Object'
      responses:
        '201':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        '400':
          description: Bad request
          content:
            application/json:
              example: Missing required fields
              schema:
                $ref: '#/components/schemas/JSON'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                example: Error registering the new user
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'

  /api/v1/users/{user_id}:
    get:
      summary: Get user by ID
      parameters:
        - name: user_id
          in: path
          required: true
          description: ID of the user to retrieve
          schema:
            type: integer
            minimum: 0
            maximum: 1000
            format: int32
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User-Object'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                example: Error getting the user
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'

  /api/v1/users/login:
    post:
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 100
                  pattern: ^[A-Za-z0-9]{3,10}$
                password:
                  type: string
                  maxLength: 100
                  pattern: ^[A-Za-z0-9]{3,10}$
              additionalProperties: false
      responses:
        '200':
          description: User successfully logged in
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              example: 'Missing required field: Email'
              schema:
                $ref: '#/components/schemas/JSON'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                example: 'User not found: Wrong login data'
                $ref: '#/components/schemas/JSON'
        '500':
          description: Error logging in
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'

  /api/v1/users/forgot-password:
    post:
      summary: Generates an authentication token for user to request a password update
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 50
                  pattern: ^[A-Za-z0-9]{3,10}$
              additionalProperties: false
      responses:
        '200':
          description: Authentication token generated successfully
          content:
            application/json:
              example:
                token: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Bad request
          content:
            application/json:
              example: 'Missing required field: Email'
              schema:
                $ref: '#/components/schemas/JSON'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                example: 'User not found: Wrong data'
                $ref: '#/components/schemas/JSON'
        '500':
          description: Error generating access token
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JSON'
        default:
          description: unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTP_ResponseCode'

security:
  - JWTAuth: []

components:
  securitySchemes:
      JWTAuth:
        type: apiKey
        in: header
        name: Authorization
        description: JWT for authentication and authorization
  schemas:
    User-Object:
      type: object
      properties:
        name:
          type: string
          maxLength: 50
          pattern: ^[A-Z][a-z]{2,} [A-Z][a-z]{2,}$
        dni:
          type: string
          maxLength: 10
          pattern: ^[0-9]{5,10}$
        email:
          type: string
          maxLength: 50
          pattern: ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$
        password:
          type: string
          maxLength: 80
          pattern: ^[A-Za-z0-9]{3,80}$
      additionalProperties: false
    String:
      type: string
      maxLength: 1000
      pattern: ^[A-Za-z0-9ÁÉÍÓÚáéíóúÜüÑñ\s]{3,10}$
      additionalProperties: false  
    JSON:
      type: aplication/json
    HTTP_ResponseCode:
      type: text/plain
    Token:
      type: object
      properties:
        token:
          type: string
          maxLength: 10000
          pattern: ^[A-Za-z0-9]{3,}$
      additionalProperties: false

